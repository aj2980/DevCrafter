import React from 'react';
import { BrowserRouter, Routes, Route } from 'react-router-dom';
import { Home } from './pages/Home';
import { Builder } from './pages/Builder';
import { Navbar } from './Navbar';
import { Tutorial } from "./pages/Tutorial";
import { About } from "./pages/About";
import { Faq} from "./pages/Faq";

// import { parseXml } from './steps';
function App() {
  // const x=parseXml(
    
  //     "Let’s create a production-worthy To-Do application in React. The app will include features such as adding, editing, deleting tasks, marking tasks as complete, and persistent storage using the browser’s localStorage. It will have a modern and clean design, leveraging Tailwind CSS for styling and icons from Lucide React.\n\nHere's how we'll achieve this:\n\n<boltArtifact id=\"react-todo-app\" title=\"React To-Do Application\">\n  <boltAction type=\"file\" filePath=\"package.json\">\n    {\n      \"name\": \"todo-app\",\n      \"private\": true,\n      \"version\": \"0.0.0\",\n      \"type\": \"module\",\n      \"scripts\": {\n        \"dev\": \"vite\",\n        \"build\": \"vite build\",\n        \"preview\": \"vite preview\"\n      },\n      \"dependencies\": {\n        \"react\": \"^18.2.0\",\n        \"react-dom\": \"^18.2.0\",\n        \"lucide-react\": \"^0.268.0\"\n      },\n      \"devDependencies\": {\n        \"@types/react\": \"^18.0.28\",\n        \"@types/react-dom\": \"^18.0.11\",\n        \"@vitejs/plugin-react\": \"^3.1.0\",\n        \"tailwindcss\": \"^3.3.0\",\n        \"vite\": \"^4.2.0\"\n      }\n    }\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"postcss.config.js\">\n    export default {\n      plugins: {\n        tailwindcss: {},\n        autoprefixer: {}\n      }\n    };\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"tailwind.config.js\">\n    export default {\n      content: [\"./index.html\", \"./src/**/*.{js,ts,jsx,tsx}\"],\n      theme: {\n        extend: {}\n      },\n      plugins: []\n    };\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"index.html\">\n    <!DOCTYPE html>\n    <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\n        <link rel=\"icon\" type=\"image/svg+xml\" href=\"https://lucide.dev/logo.svg\" />\n        <title>To-Do App</title>\n      </head>\n      <body>\n        <div id=\"root\"></div>\n      </body>\n    </html>\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/main.jsx\">\n    import React from \"react\";\n    import ReactDOM from \"react-dom/client\";\n    import App from \"./App.jsx\";\n    import \"./index.css\";\n\n    ReactDOM.createRoot(document.getElementById(\"root\")).render(\n      <React.StrictMode>\n        <App />\n      </React.StrictMode>\n    );\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/index.css\">\n    @tailwind base;\n    @tailwind components;\n    @tailwind utilities;\n\n    body {\n      @apply bg-gray-100 text-gray-800 font-sans;\n    }\n  </boltAction>\n\n  <boltAction type=\"file\" filePath=\"src/App.jsx\">\n    import React, { useState, useEffect } from \"react\";\n    import { PlusCircle, Trash2, CheckCircle, Edit } from \"lucide-react\";\n\n    const App = () => {\n      const [tasks, setTasks] = useState(() => {\n        const savedTasks = localStorage.getItem(\"tasks\");\n        return savedTasks ? JSON.parse(savedTasks) : [];\n      });\n\n      const [newTask, setNewTask] = useState(\"\");\n      const [editingTaskId, setEditingTaskId] = useState(null);\n      const [editingTaskText, setEditingTaskText] = useState(\"\");\n\n      useEffect(() => {\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n      }, [tasks]);\n\n      const addTask = () => {\n        if (newTask.trim()) {\n          setTasks([...tasks, { id: Date.now(), text: newTask, completed: false }]);\n          setNewTask(\"\");\n        }\n      };\n\n      const toggleComplete = (id) => {\n        setTasks(tasks.map(task => task.id === id ? { ...task, completed: !task.completed } : task));\n      };\n\n      const deleteTask = (id) => {\n        setTasks(tasks.filter(task => task.id !== id));\n      };\n\n      const startEditing = (id, text) => {\n        setEditingTaskId(id);\n        setEditingTaskText(text);\n      };\n\n      const saveEdit = (id) => {\n        setTasks(tasks.map(task => (task.id === id ? { ...task, text: editingTaskText } : task)));\n        setEditingTaskId(null);\n        setEditingTaskText(\"\");\n      };\n\n      return (\n        <div className=\"min-h-screen flex justify-center items-center py-10\">\n          <div className=\"bg-white p-6 rounded-lg shadow-lg w-full max-w-md\">\n            <h1 className=\"text-2xl font-bold text-center mb-4\">To-Do App</h1>\n            <div className=\"flex gap-2 mb-4\">\n              <input\n                type=\"text\"\n                placeholder=\"Add a new task\"\n                className=\"flex-1 border rounded-md px-3 py-2 text-sm\"\n                value={newTask}\n                onChange={(e) => setNewTask(e.target.value)}\n              />\n              <button\n                className=\"bg-blue-500 text-white rounded-md px-4 py-2 hover:bg-blue-600 flex items-center\"\n                onClick={addTask}\n              >\n                <PlusCircle className=\"w-4 h-4 mr-2\" />\n                Add\n              </button>\n            </div>\n            <ul className=\"space-y-2\">\n              {tasks.map((task) => (\n                <li\n                  key={task.id}\n                  className={`flex items-center justify-between p-2 border rounded-md ${\n                    task.completed ? \"bg-green-100 border-green-300\" : \"bg-gray-100 border-gray-300\"\n                  }`}\n                >\n                  {editingTaskId === task.id ? (\n                    <div className=\"flex-1 flex items-center gap-2\">\n                      <input\n                        type=\"text\"\n                        className=\"flex-1 border rounded-md px-2 py-1\"\n                        value={editingTaskText}\n                        onChange={(e) => setEditingTaskText(e.target.value)}\n                      />\n                      <button\n                        className=\"text-xs text-white bg-blue-500 rounded-md px-2 py-1 hover:bg-blue-600\"\n                        onClick={() => saveEdit(task.id)}\n                      >\n                        Save\n                      </button>\n                    </div>\n                  ) : (\n                    <span\n                      className={`flex-1 text-sm ${\n                        task.completed ? \"line-through text-gray-400\" : \"\"\n                      }`}\n                    >\n                      {task.text}\n                    </span>\n                  )}\n                  <div className=\"flex items-center gap-2\">\n                    <button\n                      className=\"text-green-600 hover:text-green-800\"\n                      onClick={() => toggleComplete(task.id)}\n                    >\n                      <CheckCircle className=\"w-5 h-5\" />\n                    </button>\n                    {!task.completed && (\n                      <button\n                        className=\"text-blue-600 hover:text-blue-800\"\n                        onClick={() => startEditing(task.id, task.text)}\n                      >\n                        <Edit className=\"w-5 h-5\" />\n                      </button>\n                    )}\n                    <button\n                      className=\"text-red-600 hover:text-red-800\"\n                      onClick={() => deleteTask(task.id)}\n                    >\n                      <Trash2 className=\"w-5 h-5\" />\n                    </button>\n                  </div>\n                </li>\n              ))}\n            </ul>\n          </div>\n        </div>\n      );\n    };\n\n    export default App;\n  </boltAction>\n\n  <boltAction type=\"shell\">\n    npm install && npx tailwindcss init -p && npm run dev\n  </boltAction>\n</boltArtifact>"
    

  // )
  // console.log(x);
  return (
    <BrowserRouter>
    <Navbar />
      <Routes>
        <Route path="/" element={<Home />} />
        <Route path="/builder" element={<Builder />} />
        <Route path="/tutorial" element={<Tutorial />} />
        <Route path="/about" element={<About />} />
        <Route path="/faqs" element={<Faq />} />

      </Routes>
    </BrowserRouter>
  );
}

export default App;